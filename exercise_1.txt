The application source code references a DNS hostname to access the database. This enables the underlying operating system to resolve the IP address dynamically. This design choice has many benefits. Additionally, the database is relational, which is the structure of choice for successful companies like Facebook and Google. Because we intend to instantiate multiple database pods within the Kubernetes deployment, additional customers will consume our new software-as-a-service offering. If we build it, they will come.

The front-end uses Python flask to present both a graphical user interface (GUI) and an application programming interface (API). The GUI uses a blue and orange theme to align with our target demographic. Users can easily add items to their cart and check out in less than one minute. The API uses JavaScript Object Notation (JSON) format for its data. Users can also track their orders using voice-activated commands via the GUI. The API response time is typically less than 20 milliseconds, and the GUI plays a "bell" sound once an order has been shipped.

The network that interconnects the application and the users requires high-availability. This removes any single points of failure from the transport path by installing redundant devices and links. The primary path will carry 100% of the traffic load while the alternate path is only used in the event of a primary path failure. This effectively doubles the available bandwidth in the network.

Regarding daily operations, the IT management team will monitor both the software application and the underlying network. Past data shows an inversely proportional correlation between operator notification time and issue manifestation. Said another way, issues are less common when operators pick up the phone sooner.

Copyright 2024 Nicholas Russo. All rights reserved.